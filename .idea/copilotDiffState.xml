<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/diabeater-web/src/Admin/AdminDashboard.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/diabeater-web/src/Admin/AdminDashboard.js" />
              <option name="originalContent" value="import React, { useState, useEffect } from 'react';&#10;import { observer } from 'mobx-react-lite';&#10;import { useNavigate, useLocation } from 'react-router-dom';&#10;import AdminDashboardViewModel from '../ViewModels/AdminDashboardViewModel'; &#10;import AdminViewModel from '../ViewModels/AdminViewModel'; &#10;import adminCreateAccountVM from '../ViewModels/AdminCreateAccountViewModel'; &#10;import UserDetailModal from './UserDetailModal'; &#10;import RejectionReasonModal from './RejectionReasonModal'; &#10;import AdminProfile from './AdminProfile';&#10;import AdminStatDashboard from './AdminStatDashboard';&#10;import AdminMealPlans from './AdminMealPlans';&#10;import AdminExportReport from './AdminExportReport';&#10;import MarketingWebsiteEditorPage from './MarketingWebsiteEditorPage';&#10;import UserFeedbacksPage from './UserFeedbacksPage';&#10;import AdminRewards from './AdminRewards';&#10;import adminStatViewModel from '../ViewModels/AdminStatViewModel';&#10;import PremiumPage from './PremiumPage';&#10;import premiumStatViewModel from '../ViewModels/PremiumStatViewModel'; &#10;import BulkInsertButton from './BulkInsertButton';&#10;import DeleteDummyData from './DeleteDummyData';&#10;import './AdminDashboard.css';&#10;import './AdminStatDashboard.css';&#10;&#10;&#10;const AdminSidebar = observer(({ onLogout }) =&gt; {&#10;    const navigate = useNavigate();&#10;    const location = useLocation();&#10;&#10;    &#10;    const getViewFromPath = (pathname) =&gt; {&#10;        if (pathname.includes('/admin/profile')) return 'myProfile';&#10;        if (pathname.includes('/admin/dashboard')) return 'dashboard';&#10;        if (pathname.includes('/admin/user-accounts')) return 'userAccounts';&#10;        if (pathname.includes('/admin/premium-accounts')) return 'premiumAccounts';&#10;        if (pathname.includes('/admin/meal-plans')) return 'mealPlans';&#10;        if (pathname.includes('/admin/export-report')) return 'exportReport';&#10;        if (pathname.includes('/admin/rewards')) return 'rewards';&#10;        if (pathname.includes('/admin/edit-website')) return 'editWebsite';&#10;        if (pathname.includes('/admin/user-feedbacks')) return 'userFeedbacks';&#10;        return 'dashboard';&#10;    };&#10;&#10;    const currentActiveView = getViewFromPath(location.pathname);&#10;&#10;    const handleNavigation = (view) =&gt; {&#10;        const routeMap = {&#10;            'myProfile': '/admin/profile',&#10;            'dashboard': '/admin/dashboard',&#10;            'userAccounts': '/admin/user-accounts',&#10;            'premiumAccounts': '/admin/premium-accounts',&#10;            'mealPlans': '/admin/meal-plans',&#10;            'exportReport': '/admin/export-report',&#10;            'rewards': '/admin/rewards',&#10;            'editWebsite': '/admin/edit-website',&#10;            'userFeedbacks': '/admin/user-feedbacks'&#10;        };&#10;&#10;        if (routeMap[view]) {&#10;            navigate(routeMap[view]);&#10;        }&#10;    };&#10;&#10;    const handleLogout = async () =&gt; {&#10;        await onLogout();&#10;        window.location.href = '/';&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;admin-sidebar&quot;&gt;&#10;            &lt;div className=&quot;logo&quot;&gt;&#10;                &lt;img src=&quot;/assetscopy/blood_drop_logo.png&quot; alt=&quot;DiaBeater Logo&quot; /&gt;&#10;                &lt;span className=&quot;logo-text&quot;&gt;DiaBeater&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;nav className=&quot;navigation&quot;&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'myProfile' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('myProfile')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-user&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;My Profile&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'dashboard' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('dashboard')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-home&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;Dashboard&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'userAccounts' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('userAccounts')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-users&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;User Accounts&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'premiumAccounts' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('premiumAccounts')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-star&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;Premium&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'mealPlans' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('mealPlans')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-clipboard-list&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;Meal Plans&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'exportReport' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('exportReport')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-file-export&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;Export Report&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'rewards' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('rewards')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-trophy&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;Rewards&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'editWebsite' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('editWebsite')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-globe&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;Edit Website&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'userFeedbacks' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('userFeedbacks')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-comments&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;User Feedback&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            &lt;/nav&gt;&#10;            &lt;button className=&quot;logout-button&quot; onClick={handleLogout}&gt;Log out&lt;/button&gt;&#10;        &lt;/div&gt;&#10;    );&#10;});&#10;&#10;const AdminCreateAccountContent = observer(() =&gt; {&#10;    const {&#10;        formData,&#10;        isCreating,&#10;        isCheckingVerification,&#10;        isSendingVerification,&#10;        errors,&#10;        globalError,&#10;        successMessage,&#10;        emailSent,&#10;        emailVerified,&#10;        accountCreated,&#10;        createdAccount,&#10;        canCreateAccount,&#10;        canCheckVerification,&#10;        canResendEmail,&#10;        setFormField,&#10;        createAdminAccount,&#10;        checkEmailVerification,&#10;        resendVerificationEmail,&#10;        clearMessages,&#10;        resetFlow&#10;    } = adminCreateAccountVM;&#10;&#10;    const handleInputChange = (field, value) =&gt; {&#10;        setFormField(field, value);&#10;    };&#10;&#10;    const handleCreateAccount = async (e) =&gt; {&#10;        e.preventDefault();&#10;        await createAdminAccount();&#10;    };&#10;&#10;    const handleCheckVerification = async () =&gt; {&#10;        await checkEmailVerification();&#10;    };&#10;&#10;    const handleResendVerificationEmail = async () =&gt; {&#10;        await resendVerificationEmail();&#10;    };&#10;&#10;    const handleStartOver = () =&gt; {&#10;        resetFlow();&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;admin-create-account-content&quot;&gt;&#10;            &lt;div className=&quot;admin-dashboard-main-content-area&quot;&gt;&#10;                &lt;header className=&quot;admin-header&quot;&gt;&#10;&#10;                &lt;/header&gt;&#10;            &lt;/div&gt;&#10;&#10;            {globalError &amp;&amp; (&#10;                &lt;div className=&quot;error-message&quot;&gt;&#10;                    {globalError}&#10;                    &lt;button onClick={clearMessages} className=&quot;close-message-btn&quot;&gt;✕&lt;/button&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;            &#10;            {successMessage &amp;&amp; (&#10;                &lt;div className=&quot;success-message&quot;&gt;&#10;                    {successMessage}&#10;                    &lt;button onClick={clearMessages} className=&quot;close-message-btn&quot;&gt;✕&lt;/button&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Step 1: Create Account Form */}&#10;            {!emailSent &amp;&amp; (&#10;                &lt;div className=&quot;create-admin-form-section&quot;&gt;&#10;                    &lt;h2&gt;Admin Account Details&lt;/h2&gt;&#10;                    &lt;form className=&quot;admin-create-form&quot;&gt;&#10;                        &lt;div className=&quot;form-row&quot;&gt;&#10;                            &lt;div className=&quot;form-group&quot;&gt;&#10;                                &lt;label htmlFor=&quot;firstName&quot;&gt;First Name&lt;/label&gt;&#10;                                &lt;input&#10;                                    type=&quot;text&quot;&#10;                                    id=&quot;firstName&quot;&#10;                                    value={formData.firstName}&#10;                                    onChange={(e) =&gt; handleInputChange('firstName', e.target.value)}&#10;                                    className={errors.firstName ? 'error' : ''}&#10;                                    disabled={isCreating}&#10;                                    placeholder=&quot;Enter first name&quot;&#10;                                /&gt;&#10;                                {errors.firstName &amp;&amp; &lt;span className=&quot;field-error&quot;&gt;{errors.firstName}&lt;/span&gt;}&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;div className=&quot;form-group&quot;&gt;&#10;                                &lt;label htmlFor=&quot;lastName&quot;&gt;Last Name&lt;/label&gt;&#10;                                &lt;input&#10;                                    type=&quot;text&quot;&#10;                                    id=&quot;lastName&quot;&#10;                                    value={formData.lastName}&#10;                                    onChange={(e) =&gt; handleInputChange('lastName', e.target.value)}&#10;                                    className={errors.lastName ? 'error' : ''}&#10;                                    disabled={isCreating}&#10;                                    placeholder=&quot;Enter last name&quot;&#10;                                /&gt;&#10;                                {errors.lastName &amp;&amp; &lt;span className=&quot;field-error&quot;&gt;{errors.lastName}&lt;/span&gt;}&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div className=&quot;form-group&quot;&gt;&#10;                            &lt;label htmlFor=&quot;email&quot;&gt;Email Address&lt;/label&gt;&#10;                            &lt;input&#10;                                type=&quot;email&quot;&#10;                                id=&quot;email&quot;&#10;                                value={formData.email}&#10;                                onChange={(e) =&gt; handleInputChange('email', e.target.value)}&#10;                                className={errors.email ? 'error' : ''}&#10;                                disabled={isCreating}&#10;                                placeholder=&quot;Enter email address&quot;&#10;                            /&gt;&#10;                            {errors.email &amp;&amp; &lt;span className=&quot;field-error&quot;&gt;{errors.email}&lt;/span&gt;}&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div className=&quot;form-group&quot;&gt;&#10;                            &lt;label htmlFor=&quot;dob&quot;&gt;Date of Birth&lt;/label&gt;&#10;                            &lt;input&#10;                                type=&quot;date&quot;&#10;                                id=&quot;dob&quot;&#10;                                value={formData.dob}&#10;                                onChange={(e) =&gt; handleInputChange('dob', e.target.value)}&#10;                                className={errors.dob ? 'error' : ''}&#10;                                disabled={isCreating}&#10;                            /&gt;&#10;                            {errors.dob &amp;&amp; &lt;span className=&quot;field-error&quot;&gt;{errors.dob}&lt;/span&gt;}&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div className=&quot;form-row&quot;&gt;&#10;                            &lt;div className=&quot;form-group&quot;&gt;&#10;                                &lt;label htmlFor=&quot;password&quot;&gt;Password&lt;/label&gt;&#10;                                &lt;input&#10;                                    type=&quot;password&quot;&#10;                                    id=&quot;password&quot;&#10;                                    value={formData.password}&#10;                                    onChange={(e) =&gt; handleInputChange('password', e.target.value)}&#10;                                    className={errors.password ? 'error' : ''}&#10;                                    disabled={isCreating}&#10;                                    placeholder=&quot;Enter password (min. 6 characters)&quot;&#10;                                /&gt;&#10;                                {errors.password &amp;&amp; &lt;span className=&quot;field-error&quot;&gt;{errors.password}&lt;/span&gt;}&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;div className=&quot;form-group&quot;&gt;&#10;                                &lt;label htmlFor=&quot;confirmPassword&quot;&gt;Confirm Password&lt;/label&gt;&#10;                                &lt;input&#10;                                    type=&quot;password&quot;&#10;                                    id=&quot;confirmPassword&quot;&#10;                                    value={formData.confirmPassword}&#10;                                    onChange={(e) =&gt; handleInputChange('confirmPassword', e.target.value)}&#10;                                    className={errors.confirmPassword ? 'error' : ''}&#10;                                    disabled={isCreating}&#10;                                    placeholder=&quot;Confirm password&quot;&#10;                                /&gt;&#10;                                {errors.confirmPassword &amp;&amp; &lt;span className=&quot;field-error&quot;&gt;{errors.confirmPassword}&lt;/span&gt;}&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;button &#10;                            type=&quot;button&quot;&#10;                            onClick={handleCreateAccount}&#10;                            disabled={!canCreateAccount}&#10;                            className=&quot;create-admin-button&quot;&#10;                        &gt;&#10;                            {isCreating ? 'Creating Account &amp; Sending Email...' : 'Create Admin Account'}&#10;                        &lt;/button&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Step 2: Email Verification Section */}&#10;            {emailSent &amp;&amp; !accountCreated &amp;&amp; (&#10;                &lt;div className=&quot;verification-section&quot;&gt;&#10;                    &lt;h3&gt; Firebase Verification Email Sent!&lt;/h3&gt;&#10;                    &lt;p&gt;A verification email has been sent to: &lt;strong&gt;{formData.email}&lt;/strong&gt;&lt;/p&gt;&#10;                    &lt;p&gt;Please check your email (including spam/junk folder) and click the verification link.&lt;/p&gt;&#10;&#10;                    &lt;div className=&quot;verification-flow&quot;&gt;&#10;                        &lt;div className=&quot;flow-step&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-envelope-open-text&quot;&gt;&lt;/i&gt;&#10;                            &lt;div&gt;&#10;                                &lt;strong&gt;1. Check Your Email&lt;/strong&gt;&#10;                                &lt;p&gt;Look for an email from Firebase Authentication&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flow-step&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-mouse-pointer&quot;&gt;&lt;/i&gt;&#10;                            &lt;div&gt;&#10;                                &lt;strong&gt;2. Click Verification Link&lt;/strong&gt;&#10;                                &lt;p&gt;Click the link in the email to verify your account&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flow-step&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt;&#10;                            &lt;div&gt;&#10;                                &lt;strong&gt;3. Complete Setup&lt;/strong&gt;&#10;                                &lt;p&gt;Come back here and click &quot;Check Verification&quot;&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &#10;                    &lt;div className=&quot;verification-actions&quot;&gt;&#10;                        &lt;button &#10;                            onClick={handleCheckVerification}&#10;                            disabled={!canCheckVerification}&#10;                            className=&quot;check-verification-button&quot;&#10;                        &gt;&#10;                            {isCheckingVerification ? 'Checking Verification...' : 'Check Email Verification'}&#10;                        &lt;/button&gt;&#10;&#10;                        {canResendEmail &amp;&amp; (&#10;                            &lt;button&#10;                                onClick={handleResendVerificationEmail}&#10;                                disabled={isSendingVerification}&#10;                                className=&quot;resend-verification-button&quot;&#10;                            &gt;&#10;                                {isSendingVerification ? 'Resending...' : 'Resend Verification Email'}&#10;                            &lt;/button&gt;&#10;                        )}&#10;&#10;                        &lt;button &#10;                            onClick={handleStartOver}&#10;                            className=&quot;start-over-button&quot;&#10;                        &gt;&#10;                            Start Over&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;verification-help&quot;&gt;&#10;                        &lt;h4&gt; Troubleshooting&lt;/h4&gt;&#10;                        &lt;ul&gt;&#10;                            &lt;li&gt;Check your spam/junk folder for the verification email&lt;/li&gt;&#10;                            &lt;li&gt;Make sure the email address is entered correctly&lt;/li&gt;&#10;                            &lt;li&gt;The verification email comes directly from Firebase&lt;/li&gt;&#10;                            &lt;li&gt;Click &quot;Resend&quot; if you don't receive the email within 5 minutes&lt;/li&gt;&#10;                            &lt;li&gt;After clicking the verification link, return here and click &quot;Check Verification&quot;&lt;/li&gt;&#10;                        &lt;/ul&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Step 3: Success Section */}&#10;            {accountCreated &amp;&amp; createdAccount &amp;&amp; (&#10;                &lt;div className=&quot;success-section&quot;&gt;&#10;                    &lt;h3&gt; Admin Account Created Successfully!&lt;/h3&gt;&#10;                    &lt;p&gt;The admin account for &lt;strong&gt;{createdAccount.email}&lt;/strong&gt; has been created and email verified!&lt;/p&gt;&#10;                    &lt;p&gt;The admin can now login using their email and password.&lt;/p&gt;&#10;                    &#10;                    &lt;div className=&quot;success-details&quot;&gt;&#10;                        &lt;div className=&quot;detail-item&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-user-shield&quot;&gt;&lt;/i&gt;&#10;                            &lt;span&gt;Admin privileges have been granted&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;detail-item&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-envelope-circle-check&quot;&gt;&lt;/i&gt;&#10;                            &lt;span&gt;Email verification completed&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;detail-item&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-key&quot;&gt;&lt;/i&gt;&#10;                            &lt;span&gt;Account is ready for login&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;success-actions&quot;&gt;&#10;                        &lt;button &#10;                            onClick={handleStartOver}&#10;                            className=&quot;create-another-button&quot;&#10;                        &gt;&#10;                            Create Another Admin Account&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;});&#10;&#10;&#10;const UserAccountRow = observer(({ user, onAction, onNameClick, type }) =&gt; {&#10;    const statusClass = user.status === 'Active' || user.status === 'approved' ? 'status-active' : 'status-inactive';&#10;&#10;    const isProfileIncomplete = (user.role !== 'nutritionist' &amp;&amp; user.role !== 'admin') &amp;&amp;&#10;                               (!user.profileCompleted || (!user.firstName &amp;&amp; !user.lastName));&#10;&#10;    const renderUserName = () =&gt; {&#10;        if (isProfileIncomplete) {&#10;            return (&#10;                &lt;span className=&quot;user-name-clickable incomplete-profile&quot; onClick={() =&gt; onNameClick(user)}&gt;&#10;                    &lt;i className=&quot;fas fa-exclamation-triangle profile-warning-icon&quot;&gt;&lt;/i&gt;&#10;                    &lt;span className=&quot;incomplete-profile-text&quot;&gt;&#10;                        {user.firstName || user.lastName ?&#10;                            `${user.firstName || ''} ${user.lastName || ''}`.trim() :&#10;                            'Profile Incomplete'&#10;                        }&#10;                    &lt;/span&gt;&#10;                    &lt;span className=&quot;profile-status-badge incomplete&quot;&gt;Incomplete&lt;/span&gt;&#10;                &lt;/span&gt;&#10;            );&#10;        }&#10;&#10;        return (&#10;            &lt;span className=&quot;user-name-clickable&quot; onClick={() =&gt; onNameClick(user)}&gt;&#10;                &lt;i className=&quot;fas fa-user-circle user-icon&quot;&gt;&lt;/i&gt;&#10;                {user.firstName ? `${user.firstName} ${user.lastName}` : user.name}&#10;            &lt;/span&gt;&#10;        );&#10;    };&#10;&#10;    return (&#10;        &lt;tr className={isProfileIncomplete ? 'incomplete-profile-row' : ''}&gt;&#10;            &lt;td&gt;&#10;                {renderUserName()}&#10;            &lt;/td&gt;&#10;            &lt;td&gt;{user.email}&lt;/td&gt;&#10;            {type === 'all' &amp;&amp; &lt;td&gt;{user.role || 'N/A'}&lt;/td&gt;}&#10;            &lt;td className={statusClass}&gt;&#10;                &lt;span className=&quot;status-dot&quot;&gt;&lt;/span&gt;{user.status === 'approved' ? 'Active' : user.status}&#10;            &lt;/td&gt;&#10;            {type === 'all' &amp;&amp; &lt;td&gt;{user.userSince || 'N/A'}&lt;/td&gt;}&#10;            {type === 'pending' &amp;&amp; &lt;td&gt;{user.appliedDate || 'N/A'}&lt;/td&gt;}&#10;&#10;            {type === 'pending' &amp;&amp; (&#10;                &lt;td&gt;&#10;                    &lt;button&#10;                        className=&quot;doc-action-button view-button&quot;&#10;                        onClick={() =&gt; AdminDashboardViewModel.viewCertificate(user.id)}&#10;                        disabled={AdminDashboardViewModel.isLoading}&#10;                    &gt;&#10;                        VIEW&#10;                    &lt;/button&gt;&#10;                &lt;/td&gt;&#10;            )}&#10;&#10;            {type === 'pending' &amp;&amp; (&#10;                &lt;&gt;&#10;                    &lt;td&gt;&#10;                        &lt;button&#10;                            className=&quot;action-button approve-button&quot;&#10;                            onClick={() =&gt; AdminDashboardViewModel.approveNutritionist(user.id)}&#10;                            disabled={AdminDashboardViewModel.isLoading}&#10;                        &gt;&#10;                            Approve&#10;                        &lt;/button&gt;&#10;                    &lt;/td&gt;&#10;                    {/* Reject Column */}&#10;                    &lt;td&gt;&#10;                        &lt;button&#10;                            className=&quot;action-button reject-button&quot;&#10;                            onClick={() =&gt; {&#10;                                AdminDashboardViewModel.setSelectedUser(user);&#10;                                AdminDashboardViewModel.setShowRejectionReasonModal(true);&#10;                            }}&#10;                            disabled={AdminDashboardViewModel.isLoading}&#10;                        &gt;&#10;                            Reject&#10;                        &lt;/button&gt;&#10;                    &lt;/td&gt;&#10;                &lt;/&gt;&#10;            )}&#10;&#10;            {type === 'all' &amp;&amp; (&#10;                &lt;td&gt;&#10;                    {user.role !== 'admin' &amp;&amp; (&#10;                        &lt;button&#10;                            className={`action-button ${user.status === 'Active' ? 'suspend-button' : 'unsuspend-button'}`}&#10;                            onClick={() =&gt; onAction(user.id, user.status)}&#10;                            disabled={AdminDashboardViewModel.userAccountsVM.isLoading}&#10;                        &gt;&#10;                            {user.status === 'Active' ? 'Suspend' : 'Unsuspend'}&#10;                        &lt;/button&gt;&#10;                    )}&#10;                &lt;/td&gt;&#10;            )}&#10;        &lt;/tr&gt;&#10;    );&#10;});&#10;&#10;&#10;const Pagination = observer(({ currentData, itemsPerPage = 10, onPageChange, currentPage = 1 }) =&gt; {&#10;    const totalItems = currentData?.length || 0;&#10;    const totalPages = Math.max(1, Math.ceil(totalItems / itemsPerPage));&#10;    &#10;    const handlePrevious = () =&gt; {&#10;        if (currentPage &gt; 1) {&#10;            onPageChange(currentPage - 1);&#10;        }&#10;    };&#10;    &#10;    const handleNext = () =&gt; {&#10;        if (currentPage &lt; totalPages) {&#10;            onPageChange(currentPage + 1);&#10;        }&#10;    };&#10;    &#10;    const handlePageClick = (pageNumber) =&gt; {&#10;        onPageChange(pageNumber);&#10;    };&#10;&#10;    &#10;    const getPageNumbers = () =&gt; {&#10;        const pages = [];&#10;        const maxVisiblePages = 5;&#10;        &#10;        if (totalPages &lt;= maxVisiblePages) {&#10;            for (let i = 1; i &lt;= totalPages; i++) {&#10;                pages.push(i);&#10;            }&#10;        } else {&#10;            const startPage = Math.max(1, currentPage - 2);&#10;            const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);&#10;            &#10;            for (let i = startPage; i &lt;= endPage; i++) {&#10;                pages.push(i);&#10;            }&#10;        }&#10;        &#10;        return pages;&#10;    };&#10;    &#10;    return (&#10;        &lt;div className=&quot;pagination&quot;&gt;&#10;            &lt;button &#10;                onClick={handlePrevious} &#10;                disabled={currentPage &lt;= 1}&#10;                className={currentPage &lt;= 1 ? 'disabled' : ''}&#10;            &gt;&#10;                &amp;lt;&#10;            &lt;/button&gt;&#10;            &#10;            {getPageNumbers().map(pageNumber =&gt; (&#10;                &lt;button&#10;                    key={pageNumber}&#10;                    onClick={() =&gt; handlePageClick(pageNumber)}&#10;                    className={currentPage === pageNumber ? 'active' : ''}&#10;                &gt;&#10;                    {pageNumber}&#10;                &lt;/button&gt;&#10;            ))}&#10;            &#10;            &lt;button &#10;                onClick={handleNext} &#10;                disabled={currentPage &gt;= totalPages}&#10;                className={currentPage &gt;= totalPages ? 'disabled' : ''}&#10;            &gt;&#10;                &amp;gt;&#10;            &lt;/button&gt;&#10;            &#10;            &lt;span className=&quot;pagination-info&quot;&gt;&#10;                Page {currentPage} of {totalPages} ({totalItems} total items)&#10;            &lt;/span&gt;&#10;        &lt;/div&gt;&#10;    );&#10;});&#10;&#10;&#10;const UserAccountsContent = observer(({ activeUserAccountTab }) =&gt; {&#10;    const navigate = useNavigate();&#10;    const location = useLocation();&#10;&#10;    const {&#10;        activeTab,&#10;        filteredPendingAccounts,&#10;        isLoading,&#10;        error,&#10;        showRejectionReasonModal,&#10;        rejectionReason,&#10;        selectedUser,&#10;        showUserDetailModal,&#10;        userAccountsVM,&#10;        setSelectedUser,&#10;        setShowUserDetailModal,&#10;        setShowRejectionReasonModal,&#10;        setRejectionReason,&#10;    } = AdminDashboardViewModel;&#10;&#10;    const {&#10;        searchTerm,&#10;        filteredAllAccounts,&#10;        isLoading: userAccountsLoading,&#10;        error: userAccountsError,&#10;    } = userAccountsVM;&#10;&#10;    // Account type filter state&#10;    const [selectedAccountType, setSelectedAccountType] = useState('all');&#10;    const [currentPage, setCurrentPage] = useState(1);&#10;    const itemsPerPage = 10;&#10;&#10;    // Account type options&#10;    const accountTypeOptions = [&#10;        { value: 'all', label: 'All Account Types', count: 0 },&#10;        { value: 'basic', label: 'Basic Users', count: 0 },&#10;        { value: 'premium', label: 'Premium Users', count: 0 },&#10;        { value: 'nutritionist', label: 'Nutritionists', count: 0 },&#10;        { value: 'admin', label: 'Administrators', count: 0 }&#10;    ];&#10;&#10;    // Get current tab&#10;    const getCurrentTab = () =&gt; {&#10;        if (activeUserAccountTab) {&#10;            const tabMap = {&#10;                'all': 'ALL_ACCOUNTS',&#10;                'pending': 'PENDING_APPROVAL',&#10;                'createAdmin': 'CREATE_ADMIN'&#10;            };&#10;            return tabMap[activeUserAccountTab] || 'ALL_ACCOUNTS';&#10;        }&#10;&#10;        const pathname = location.pathname;&#10;        if (pathname.includes('/user-accounts/pending')) return 'PENDING_APPROVAL';&#10;        if (pathname.includes('/user-accounts/create-admin')) return 'CREATE_ADMIN';&#10;        if (pathname.includes('/user-accounts/all')) return 'ALL_ACCOUNTS';&#10;        return 'ALL_ACCOUNTS'; &#10;    };&#10;&#10;    const currentTab = getCurrentTab();&#10;&#10;    // Filter data by account type&#10;    const getFilteredData = () =&gt; {&#10;        const baseData = activeTab === 'ALL_ACCOUNTS' ? filteredAllAccounts : filteredPendingAccounts;&#10;        &#10;        if (selectedAccountType === 'all') {&#10;            return baseData;&#10;        }&#10;        &#10;        return baseData.filter(user =&gt; user.role === selectedAccountType);&#10;    };&#10;&#10;    // Calculate counts for each account type&#10;    const getAccountTypeCounts = () =&gt; {&#10;        const baseData = activeTab === 'ALL_ACCOUNTS' ? filteredAllAccounts : filteredPendingAccounts;&#10;        &#10;        const counts = {&#10;            all: baseData.length,&#10;            basic: baseData.filter(user =&gt; user.role === 'basic').length,&#10;            premium: baseData.filter(user =&gt; user.role === 'premium').length,&#10;            nutritionist: baseData.filter(user =&gt; user.role === 'nutritionist').length,&#10;            admin: baseData.filter(user =&gt; user.role === 'admin').length&#10;        };&#10;&#10;        return accountTypeOptions.map(option =&gt; ({&#10;            ...option,&#10;            count: counts[option.value] || 0&#10;        }));&#10;    };&#10;&#10;    // Get current filtered data&#10;    const currentData = getFilteredData();&#10;    const accountTypeOptionsWithCounts = getAccountTypeCounts();&#10;    &#10;    // Pagination logic&#10;    const totalItems = currentData.length;&#10;    const totalPages = Math.ceil(totalItems / itemsPerPage);&#10;    const startIndex = (currentPage - 1) * itemsPerPage;&#10;    const endIndex = startIndex + itemsPerPage;&#10;    const currentPageData = currentData.slice(startIndex, endIndex);&#10;&#10;    // Event handlers&#10;    const handleAccountTypeChange = (accountType) =&gt; {&#10;        setSelectedAccountType(accountType);&#10;        setCurrentPage(1);&#10;    };&#10;&#10;    const handlePageChange = (newPage) =&gt; {&#10;        setCurrentPage(newPage);&#10;    };&#10;&#10;    const handleTabNavigation = (tab) =&gt; {&#10;        const routeMap = {&#10;            'ALL_ACCOUNTS': '/admin/user-accounts/all',&#10;            'PENDING_APPROVAL': '/admin/user-accounts/pending',&#10;            'CREATE_ADMIN': '/admin/user-accounts/create-admin'&#10;        };&#10;&#10;        if (routeMap[tab]) {&#10;            navigate(routeMap[tab]);&#10;        }&#10;    };&#10;&#10;    const handleOpenModal = async (user) =&gt; {&#10;        console.log(&quot;[AdminDashboard] Opening user detail modal for:&quot;, user);&#10;&#10;        try {&#10;            setSelectedUser(user);&#10;&#10;            if (user.id || user._id) {&#10;                const userId = user.id || user._id;&#10;&#10;                if (typeof premiumStatViewModel.loadPremiumData === 'function') {&#10;                    if (premiumStatViewModel.allPremiumUserAccounts.length === 0) {&#10;                        await premiumStatViewModel.loadPremiumData();&#10;                    }&#10;&#10;                    const premiumUser = premiumStatViewModel.allPremiumUserAccounts.find(&#10;                        premiumAccount =&gt; premiumAccount._id === userId || premiumAccount.id === userId&#10;                    );&#10;&#10;                    if (premiumUser) {&#10;                        console.log(&quot;[AdminDashboard] Found premium user data:&quot;, premiumUser);&#10;                        setSelectedUser(premiumUser);&#10;                    } else {&#10;                        console.log(&quot;[AdminDashboard] No premium data found for user, using basic data&quot;);&#10;                        &#10;                        const enrichedUser = {&#10;                            ...user,&#10;                            _id: userId,&#10;                            displayName: user.firstName &amp;&amp; user.lastName&#10;                                ? `${user.firstName} ${user.lastName}`&#10;                                : (user.name || user.email),&#10;                            displayStatus: 'inactive',&#10;                            displayRenewalDate: 'N/A',&#10;                            currentSubscription: null&#10;                        };&#10;                        setSelectedUser(enrichedUser);&#10;                    }&#10;                } else {&#10;                    console.log(&quot;[AdminDashboard] PremiumStatViewModel methods not available, using basic user data&quot;);&#10;                }&#10;            }&#10;&#10;            setShowUserDetailModal(true);&#10;&#10;        } catch (error) {&#10;            console.error(&quot;[AdminDashboard] Error enriching user data:&quot;, error);&#10;            setShowUserDetailModal(true);&#10;        }&#10;    };&#10;&#10;    const handleCloseModal = () =&gt; {&#10;        setShowUserDetailModal(false);&#10;        setSelectedUser(null);&#10;        AdminDashboardViewModel.fetchAccounts();&#10;    };&#10;&#10;    const handleApproveFromModal = async (userId) =&gt; {&#10;        await adminStatViewModel.approveNutritionist(userId);&#10;        handleCloseModal();&#10;    };&#10;&#10;    const handleRejectFromModal = async (userId) =&gt; {&#10;        setSelectedUser(adminStatViewModel.selectedUserForManagement);&#10;        setShowRejectionReasonModal(true);&#10;    };&#10;&#10;    const handleRejectNutritionist = async (userId, reasonParam) =&gt; {&#10;        try {&#10;            const finalReason = reasonParam || rejectionReason;&#10;            &#10;            console.log('Rejecting nutritionist:', userId, 'with reason:', finalReason);&#10;            &#10;            if (!finalReason || !finalReason.trim()) {&#10;                alert('Please provide a reason for rejection.');&#10;                return;&#10;            }&#10;            &#10;            await AdminDashboardViewModel.rejectNutritionist(userId, finalReason.trim());&#10;            &#10;            setShowRejectionReasonModal(false);&#10;            setSelectedUser(null);&#10;            setRejectionReason('');&#10;            &#10;            await AdminDashboardViewModel.fetchAccounts();&#10;            &#10;            alert('Nutritionist has been rejected and notification email sent!');&#10;            &#10;        } catch (error) {&#10;            console.error('Error rejecting nutritionist:', error);&#10;            alert(`Failed to reject nutritionist: ${error.message}`);&#10;        }&#10;    };&#10;&#10;    const handleConfirmRejectFromModal = async (userId, reason) =&gt; {&#10;        await adminStatViewModel.rejectNutritionist(userId, reason);&#10;        setShowRejectionReasonModal(false);&#10;        handleCloseModal();&#10;    };&#10;&#10;    const handleViewDocumentFromModal = async (userId) =&gt; {&#10;        await adminStatViewModel.viewCertificate(userId);&#10;    };&#10;&#10;    const handleSuspendFromModal = async (userId, isSuspended) =&gt; {&#10;        await adminStatViewModel.suspendUserAccount(userId, isSuspended);&#10;        handleCloseModal();&#10;    };&#10;&#10;    const handleChangeRoleFromModal = async (userId, newRole) =&gt; {&#10;        await adminStatViewModel.updateUserRole(userId, newRole);&#10;        handleCloseModal();&#10;    };&#10;&#10;    const handleDeleteAccountFromModal = async (userId) =&gt; {&#10;        await adminStatViewModel.deleteUserAccount(userId);&#10;        handleCloseModal();&#10;    };&#10;&#10;    const handleSuspendUnsuspend = async (userId, currentStatus) =&gt; {&#10;        console.log(`Attempting to change status for User ${userId} from ${currentStatus}`);&#10;        try {&#10;            if (currentStatus === 'Active') {&#10;                await userAccountsVM.suspendUser(userId);&#10;            } else {&#10;                await userAccountsVM.unsuspendUser(userId);&#10;            }&#10;        } catch (operationError) {&#10;            console.error(&quot;Error changing user status in component:&quot;, operationError);&#10;        }&#10;    };&#10;&#10;    // Effects&#10;    useEffect(() =&gt; {&#10;        AdminDashboardViewModel.setActiveTab(currentTab);&#10;    }, [currentTab]);&#10;&#10;    useEffect(() =&gt; {&#10;        AdminDashboardViewModel.fetchAccounts();&#10;    }, [activeTab]);&#10;&#10;    useEffect(() =&gt; {&#10;        setSelectedAccountType('all');&#10;        setCurrentPage(1);&#10;    }, [activeTab, searchTerm]);&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div className=&quot;admin-dashboard-main-content-area&quot;&gt;&#10;                &lt;header className=&quot;admin-header&quot;&gt;&#10;                    &lt;h1 className=&quot;admin-page-title&quot;&gt;USER ACCOUNTS&lt;/h1&gt;&#10;                    &lt;div className=&quot;admin-search-bar&quot;&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            placeholder=&quot;Search by name or email&quot;&#10;                            value={searchTerm}&#10;                            onChange={(e) =&gt; userAccountsVM.setSearchTerm(e.target.value)}&#10;                        /&gt;&#10;                        &lt;i className=&quot;fas fa-search&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/header&gt;&#10;                &lt;div style={{ padding: '10px 0' }}&gt;&#10;                    &lt;BulkInsertButton /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div style={{ padding: '10px 0' }}&gt;&#10;                    &lt;DeleteDummyData /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;admin-tabs&quot;&gt;&#10;                &lt;button&#10;                    className={`tab-button ${activeTab === 'ALL_ACCOUNTS' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleTabNavigation('ALL_ACCOUNTS')}&#10;                &gt;&#10;                    ALL ACCOUNTS&#10;                &lt;/button&gt;&#10;                &lt;button&#10;                    className={`tab-button ${activeTab === 'PENDING_APPROVAL' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleTabNavigation('PENDING_APPROVAL')}&#10;                &gt;&#10;                    PENDING APPROVAL&#10;                &lt;/button&gt;&#10;                &lt;button&#10;                    className={`tab-button ${activeTab === 'CREATE_ADMIN' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleTabNavigation('CREATE_ADMIN')}&#10;                &gt;&#10;                    CREATE ADMIN&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &#10;            {activeTab === 'ALL_ACCOUNTS' &amp;&amp; (&#10;                &lt;div style={{&#10;                    padding: '20px',&#10;                    backgroundColor: '#fffaf3'&#10;                }}&gt;&#10;                    &lt;div style={{ &#10;                        display: 'flex', &#10;                        alignItems: 'center', &#10;                        gap: '12px', &#10;                        flexWrap: 'wrap' &#10;                    }}&gt;&#10;                        &lt;span style={{ &#10;                            fontWeight: '600', &#10;                            color: '#374151',&#10;                            fontSize: '14px',&#10;                            marginRight: '8px'&#10;                        }}&gt;&#10;                            Filter by Account Type:&#10;                        &lt;/span&gt;&#10;                        &#10;                        {accountTypeOptionsWithCounts.map((option) =&gt; (&#10;                            &lt;button&#10;                                key={option.value}&#10;                                onClick={() =&gt; handleAccountTypeChange(option.value)}&#10;                                style={{&#10;                                    padding: '6px 12px',&#10;                                    border: selectedAccountType === option.value ? '2px solid #1e525c' : '1px solid #d1d5db',&#10;                                    borderRadius: '6px',&#10;                                    backgroundColor: selectedAccountType === option.value ? '#1e525c' : 'white',&#10;                                    color: selectedAccountType === option.value ? 'white' : '#1e525c',&#10;                                    fontSize: '13px',&#10;                                    fontWeight: selectedAccountType === option.value ? '600' : '500',&#10;                                    cursor: 'pointer',&#10;                                    transition: 'all 0.2s ease',&#10;                                    display: 'inline-flex',&#10;                                    alignItems: 'center',&#10;                                    gap: '6px',&#10;                                    boxShadow: selectedAccountType === option.value ? '0 2px 4px rgba(79, 70, 229, 0.2)' : '0 1px 2px rgba(0, 0, 0, 0.05)'&#10;                                }}&#10;                            &gt;&#10;                                &lt;span&gt;{option.label}&lt;/span&gt;&#10;                                &lt;span style={{&#10;                                    backgroundColor: selectedAccountType === option.value ? 'rgba(255,255,255,0.2)' : '#f3f4f6',&#10;                                    color: selectedAccountType === option.value ? 'white' : '#6b7280',&#10;                                    padding: '1px 6px',&#10;                                    borderRadius: '4px',&#10;                                    fontSize: '11px',&#10;                                    fontWeight: '700',&#10;                                    minWidth: '18px',&#10;                                    textAlign: 'center'&#10;                                }}&gt;&#10;                                    {option.count}&#10;                                &lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                    &#10;                    &#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {activeTab === 'CREATE_ADMIN' ? (&#10;                &lt;AdminCreateAccountContent /&gt;&#10;            ) : (&#10;                &lt;&gt;&#10;                    {(isLoading || userAccountsLoading) &amp;&amp; &lt;p className=&quot;loading-message&quot;&gt;Loading accounts...&lt;/p&gt;}&#10;                    {(error || userAccountsError) &amp;&amp; &lt;p className=&quot;error-message&quot;&gt;{error || userAccountsError}&lt;/p&gt;}&#10;&#10;                    &lt;div className=&quot;table-container&quot;&gt;&#10;                        &lt;table&gt;&#10;                            &lt;thead&gt;&#10;                                &lt;tr&gt;&#10;                                    &lt;th&gt;Name&lt;/th&gt;&#10;                                    &lt;th&gt;Email&lt;/th&gt;&#10;                                    {activeTab === 'ALL_ACCOUNTS' &amp;&amp; &lt;th&gt;Account Type&lt;/th&gt;}&#10;                                    &lt;th&gt;Status&lt;/th&gt;&#10;                                    {activeTab === 'ALL_ACCOUNTS' &amp;&amp; &lt;th&gt;User Since&lt;/th&gt;}&#10;                                    {activeTab === 'PENDING_APPROVAL' &amp;&amp; (&#10;                                        &lt;&gt;&#10;                                            &lt;th&gt;Signed up at&lt;/th&gt;&#10;                                            &lt;th&gt;Documents&lt;/th&gt;&#10;                                            &lt;th&gt;Approve&lt;/th&gt;&#10;                                            &lt;th&gt;Reject&lt;/th&gt;&#10;                                        &lt;/&gt;&#10;                                    )}&#10;                                    {activeTab === 'ALL_ACCOUNTS' &amp;&amp; &lt;th&gt;Action&lt;/th&gt;}&#10;                                &lt;/tr&gt;&#10;                            &lt;/thead&gt;&#10;&#10;                            &lt;tbody&gt;&#10;                                {currentPageData.length &gt; 0 ? (&#10;                                    currentPageData.map(user =&gt; (&#10;                                        &lt;UserAccountRow&#10;                                            key={user.id}&#10;                                            user={user}&#10;                                            onAction={handleSuspendUnsuspend}&#10;                                            onNameClick={handleOpenModal}&#10;                                            type={activeTab === 'ALL_ACCOUNTS' ? 'all' : 'pending'}&#10;                                        /&gt;&#10;                                    ))&#10;                                ) : (&#10;                                    &lt;tr&gt;&#10;                                        &lt;td colSpan={activeTab === 'ALL_ACCOUNTS' ? '6' : '7'} className=&quot;no-data-message&quot;&gt;&#10;                                            {(isLoading || userAccountsLoading) ? '' : (&#10;                                                selectedAccountType === 'all' &#10;                                                    ? (activeTab === 'ALL_ACCOUNTS' ? 'No user accounts found.' : 'No accounts pending approval.')&#10;                                                    : `No ${selectedAccountType} accounts found.`&#10;                                            )}&#10;                                        &lt;/td&gt;&#10;                                    &lt;/tr&gt;&#10;                                )}&#10;                            &lt;/tbody&gt;&#10;                        &lt;/table&gt;&#10;&#10;                        {/* Pagination */}&#10;                        {currentData.length &gt; 0 &amp;&amp; (&#10;                            &lt;Pagination&#10;                                currentData={currentData}&#10;                                itemsPerPage={itemsPerPage}&#10;                                currentPage={currentPage}&#10;                                onPageChange={handlePageChange}&#10;                            /&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/&gt;&#10;            )}&#10;&#10;            {/* Modals */}&#10;            {showUserDetailModal &amp;&amp; selectedUser &amp;&amp; (&#10;                &lt;UserDetailModal&#10;                    user={selectedUser}&#10;                    onClose={handleCloseModal}&#10;                    onApprove={handleApproveFromModal}&#10;                    onReject={handleRejectFromModal}&#10;                    onViewDocument={handleViewDocumentFromModal}&#10;                    onSuspend={handleSuspendFromModal}&#10;                    onUnsuspend={handleSuspendFromModal}&#10;                    onChangeRole={handleChangeRoleFromModal}&#10;                    onDeleteAccount={handleDeleteAccountFromModal}&#10;                    loading={adminStatViewModel.loading}&#10;                    error={adminStatViewModel.error}&#10;                    success={adminStatViewModel.success}&#10;                    showRejectionReasonModal={showRejectionReasonModal}&#10;                    rejectionReason={rejectionReason}&#10;                    setRejectionReason={setRejectionReason}&#10;                    onConfirmReject={handleConfirmRejectFromModal}&#10;                /&gt;&#10;            )}&#10;&#10;            {showRejectionReasonModal &amp;&amp; selectedUser &amp;&amp; (&#10;                &lt;RejectionReasonModal&#10;                    reason={rejectionReason}&#10;                    setReason={(value) =&gt; setRejectionReason(value)}&#10;                    onConfirm={(reasonFromModal) =&gt; {&#10;                        const finalReason = reasonFromModal || rejectionReason;&#10;                        handleRejectNutritionist(selectedUser.id, finalReason);&#10;                    }}&#10;                    onClose={() =&gt; {&#10;                        setShowRejectionReasonModal(false);&#10;                        setSelectedUser(null);&#10;                        setRejectionReason('');&#10;                    }}&#10;                /&gt;&#10;            )}&#10;        &lt;/&gt;&#10;    );&#10;});&#10;&#10;&#10;const AdminDashboard = observer(({ onLogout, activeSection, activeMealPlanTab, activeUserAccountTab }) =&gt; {&#10;    const location = useLocation();&#10;&#10;    const getCurrentView = () =&gt; {&#10;        if (activeSection) return activeSection;&#10;&#10;        const pathname = location.pathname;&#10;        if (pathname.includes('/admin/profile')) return 'myProfile';&#10;        if (pathname.includes('/admin/user-accounts')) return 'userAccounts';&#10;        if (pathname.includes('/admin/premium-accounts')) return 'premiumAccounts';&#10;        if (pathname.includes('/admin/meal-plans') || pathname.includes('/admin/meal-plan-detail')) return 'mealPlans';&#10;        if (pathname.includes('/admin/export-report')) return 'exportReport';&#10;        if (pathname.includes('/admin/rewards')) return 'rewards';&#10;        if (pathname.includes('/admin/edit-website')) return 'editWebsite';&#10;        if (pathname.includes('/admin/user-feedbacks')) return 'userFeedbacks';&#10;        return 'dashboard'; &#10;    };&#10;&#10;    const currentView = getCurrentView();&#10;&#10;    useEffect(() =&gt; {&#10;        const checkAccess = async () =&gt; {&#10;            await AdminViewModel.verifyAdminAccess();&#10;            console.log('isAdmin', AdminViewModel.isAdmin);&#10;            if (!AdminViewModel.isAdmin) {&#10;                alert(&quot;Access Denied: You must be an administrator to view this page.&quot;);&#10;                window.location.href = '/login';&#10;            }&#10;        };&#10;        checkAccess();&#10;    }, []);&#10;&#10;    return (&#10;        &lt;div className=&quot;admin-dashboard-page&quot;&gt;&#10;            &lt;AdminSidebar onLogout={onLogout} /&gt;&#10;            &lt;div className=&quot;admin-main-content&quot;&gt;&#10;                {currentView === 'myProfile' &amp;&amp; &lt;AdminProfile /&gt;}&#10;                {currentView === 'dashboard' &amp;&amp; &lt;AdminStatDashboard /&gt;}&#10;                {currentView === 'userAccounts' &amp;&amp; &lt;UserAccountsContent activeUserAccountTab={activeUserAccountTab} /&gt;}&#10;                {currentView === 'premiumAccounts' &amp;&amp; &lt;PremiumPage /&gt;}&#10;                {(currentView === 'mealPlans' || currentView === 'mealPlanDetail') &amp;&amp; &lt;AdminMealPlans activeMealPlanTab={activeMealPlanTab} /&gt;}&#10;                {currentView === 'exportReport' &amp;&amp; &lt;AdminExportReport /&gt;}&#10;                {currentView === 'rewards' &amp;&amp; &lt;AdminRewards /&gt;}&#10;                {currentView === 'editWebsite' &amp;&amp; &lt;MarketingWebsiteEditorPage /&gt;}&#10;                {currentView === 'userFeedbacks' &amp;&amp; &lt;UserFeedbacksPage /&gt;}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;});&#10;&#10;export default AdminDashboard;&#10;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { observer } from 'mobx-react-lite';&#10;import { useNavigate, useLocation } from 'react-router-dom';&#10;import AdminDashboardViewModel from '../ViewModels/AdminDashboardViewModel'; &#10;import AdminViewModel from '../ViewModels/AdminViewModel'; &#10;import adminCreateAccountVM from '../ViewModels/AdminCreateAccountViewModel'; &#10;import UserDetailModal from './UserDetailModal'; &#10;import RejectionReasonModal from './RejectionReasonModal'; &#10;import AdminProfile from './AdminProfile';&#10;import AdminStatDashboard from './AdminStatDashboard';&#10;import AdminMealPlans from './AdminMealPlans';&#10;import AdminExportReport from './AdminExportReport';&#10;import MarketingWebsiteEditorPage from './MarketingWebsiteEditorPage';&#10;import UserFeedbacksPage from './UserFeedbacksPage';&#10;import AdminRewards from './AdminRewards';&#10;import adminStatViewModel from '../ViewModels/AdminStatViewModel';&#10;import PremiumPage from './PremiumPage';&#10;import premiumStatViewModel from '../ViewModels/PremiumStatViewModel'; &#10;import BulkInsertButton from './BulkInsertButton';&#10;import DeleteDummyData from './DeleteDummyData';&#10;import './AdminDashboard.css';&#10;import './AdminStatDashboard.css';&#10;&#10;&#10;const AdminSidebar = observer(({ onLogout }) =&gt; {&#10;    const navigate = useNavigate();&#10;    const location = useLocation();&#10;&#10;    &#10;    const getViewFromPath = (pathname) =&gt; {&#10;        if (pathname.includes('/admin/profile')) return 'myProfile';&#10;        if (pathname.includes('/admin/dashboard')) return 'dashboard';&#10;        if (pathname.includes('/admin/user-accounts')) return 'userAccounts';&#10;        if (pathname.includes('/admin/premium-accounts')) return 'premiumAccounts';&#10;        if (pathname.includes('/admin/meal-plans')) return 'mealPlans';&#10;        if (pathname.includes('/admin/export-report')) return 'exportReport';&#10;        if (pathname.includes('/admin/rewards')) return 'rewards';&#10;        if (pathname.includes('/admin/edit-website')) return 'editWebsite';&#10;        if (pathname.includes('/admin/user-feedbacks')) return 'userFeedbacks';&#10;        return 'dashboard';&#10;    };&#10;&#10;    const currentActiveView = getViewFromPath(location.pathname);&#10;&#10;    const handleNavigation = (view) =&gt; {&#10;        const routeMap = {&#10;            'myProfile': '/admin/profile',&#10;            'dashboard': '/admin/dashboard',&#10;            'userAccounts': '/admin/user-accounts',&#10;            'premiumAccounts': '/admin/premium-accounts',&#10;            'mealPlans': '/admin/meal-plans',&#10;            'exportReport': '/admin/export-report',&#10;            'rewards': '/admin/rewards',&#10;            'editWebsite': '/admin/edit-website',&#10;            'userFeedbacks': '/admin/user-feedbacks'&#10;        };&#10;&#10;        if (routeMap[view]) {&#10;            navigate(routeMap[view]);&#10;        }&#10;    };&#10;&#10;    const handleLogout = async () =&gt; {&#10;        await onLogout();&#10;        window.location.href = '/';&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;admin-sidebar&quot;&gt;&#10;            &lt;div className=&quot;logo&quot;&gt;&#10;                &lt;img src=&quot;/assetscopy/blood_drop_logo.png&quot; alt=&quot;DiaBeater Logo&quot; /&gt;&#10;                &lt;span className=&quot;logo-text&quot;&gt;DiaBeater&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;nav className=&quot;navigation&quot;&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'myProfile' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('myProfile')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-user&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;My Profile&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'dashboard' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('dashboard')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-home&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;Dashboard&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'userAccounts' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('userAccounts')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-users&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;User Accounts&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'premiumAccounts' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('premiumAccounts')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-star&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;Premium&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'mealPlans' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('mealPlans')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-clipboard-list&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;Meal Plans&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'exportReport' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('exportReport')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-file-export&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;Export Report&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'rewards' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('rewards')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-trophy&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;Rewards&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'editWebsite' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('editWebsite')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-globe&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;Edit Website&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&#10;                    className={`nav-item ${currentActiveView === 'userFeedbacks' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleNavigation('userFeedbacks')}&#10;                &gt;&#10;                    &lt;i className=&quot;fas fa-comments&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;User Feedback&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            &lt;/nav&gt;&#10;            &lt;button className=&quot;logout-button&quot; onClick={handleLogout}&gt;Log out&lt;/button&gt;&#10;        &lt;/div&gt;&#10;    );&#10;});&#10;&#10;const AdminCreateAccountContent = observer(() =&gt; {&#10;    const {&#10;        formData,&#10;        isCreating,&#10;        isCheckingVerification,&#10;        isSendingVerification,&#10;        errors,&#10;        globalError,&#10;        successMessage,&#10;        emailSent,&#10;        emailVerified,&#10;        accountCreated,&#10;        createdAccount,&#10;        canCreateAccount,&#10;        canCheckVerification,&#10;        canResendEmail,&#10;        setFormField,&#10;        createAdminAccount,&#10;        checkEmailVerification,&#10;        resendVerificationEmail,&#10;        clearMessages,&#10;        resetFlow&#10;    } = adminCreateAccountVM;&#10;&#10;    const handleInputChange = (field, value) =&gt; {&#10;        setFormField(field, value);&#10;    };&#10;&#10;    const handleCreateAccount = async (e) =&gt; {&#10;        e.preventDefault();&#10;        await createAdminAccount();&#10;    };&#10;&#10;    const handleCheckVerification = async () =&gt; {&#10;        await checkEmailVerification();&#10;    };&#10;&#10;    const handleResendVerificationEmail = async () =&gt; {&#10;        await resendVerificationEmail();&#10;    };&#10;&#10;    const handleStartOver = () =&gt; {&#10;        resetFlow();&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;admin-create-account-content&quot;&gt;&#10;            &lt;div className=&quot;admin-dashboard-main-content-area&quot;&gt;&#10;                &lt;header className=&quot;admin-header&quot;&gt;&#10;&#10;                &lt;/header&gt;&#10;            &lt;/div&gt;&#10;&#10;            {globalError &amp;&amp; (&#10;                &lt;div className=&quot;error-message&quot;&gt;&#10;                    {globalError}&#10;                    &lt;button onClick={clearMessages} className=&quot;close-message-btn&quot;&gt;✕&lt;/button&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;            &#10;            {successMessage &amp;&amp; (&#10;                &lt;div className=&quot;success-message&quot;&gt;&#10;                    {successMessage}&#10;                    &lt;button onClick={clearMessages} className=&quot;close-message-btn&quot;&gt;✕&lt;/button&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Step 1: Create Account Form */}&#10;            {!emailSent &amp;&amp; (&#10;                &lt;div className=&quot;create-admin-form-section&quot;&gt;&#10;                    &lt;h2&gt;Admin Account Details&lt;/h2&gt;&#10;                    &lt;form className=&quot;admin-create-form&quot;&gt;&#10;                        &lt;div className=&quot;form-row&quot;&gt;&#10;                            &lt;div className=&quot;form-group&quot;&gt;&#10;                                &lt;label htmlFor=&quot;firstName&quot;&gt;First Name&lt;/label&gt;&#10;                                &lt;input&#10;                                    type=&quot;text&quot;&#10;                                    id=&quot;firstName&quot;&#10;                                    value={formData.firstName}&#10;                                    onChange={(e) =&gt; handleInputChange('firstName', e.target.value)}&#10;                                    className={errors.firstName ? 'error' : ''}&#10;                                    disabled={isCreating}&#10;                                    placeholder=&quot;Enter first name&quot;&#10;                                /&gt;&#10;                                {errors.firstName &amp;&amp; &lt;span className=&quot;field-error&quot;&gt;{errors.firstName}&lt;/span&gt;}&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;div className=&quot;form-group&quot;&gt;&#10;                                &lt;label htmlFor=&quot;lastName&quot;&gt;Last Name&lt;/label&gt;&#10;                                &lt;input&#10;                                    type=&quot;text&quot;&#10;                                    id=&quot;lastName&quot;&#10;                                    value={formData.lastName}&#10;                                    onChange={(e) =&gt; handleInputChange('lastName', e.target.value)}&#10;                                    className={errors.lastName ? 'error' : ''}&#10;                                    disabled={isCreating}&#10;                                    placeholder=&quot;Enter last name&quot;&#10;                                /&gt;&#10;                                {errors.lastName &amp;&amp; &lt;span className=&quot;field-error&quot;&gt;{errors.lastName}&lt;/span&gt;}&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div className=&quot;form-group&quot;&gt;&#10;                            &lt;label htmlFor=&quot;email&quot;&gt;Email Address&lt;/label&gt;&#10;                            &lt;input&#10;                                type=&quot;email&quot;&#10;                                id=&quot;email&quot;&#10;                                value={formData.email}&#10;                                onChange={(e) =&gt; handleInputChange('email', e.target.value)}&#10;                                className={errors.email ? 'error' : ''}&#10;                                disabled={isCreating}&#10;                                placeholder=&quot;Enter email address&quot;&#10;                            /&gt;&#10;                            {errors.email &amp;&amp; &lt;span className=&quot;field-error&quot;&gt;{errors.email}&lt;/span&gt;}&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div className=&quot;form-group&quot;&gt;&#10;                            &lt;label htmlFor=&quot;dob&quot;&gt;Date of Birth&lt;/label&gt;&#10;                            &lt;input&#10;                                type=&quot;date&quot;&#10;                                id=&quot;dob&quot;&#10;                                value={formData.dob}&#10;                                onChange={(e) =&gt; handleInputChange('dob', e.target.value)}&#10;                                className={errors.dob ? 'error' : ''}&#10;                                disabled={isCreating}&#10;                            /&gt;&#10;                            {errors.dob &amp;&amp; &lt;span className=&quot;field-error&quot;&gt;{errors.dob}&lt;/span&gt;}&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div className=&quot;form-row&quot;&gt;&#10;                            &lt;div className=&quot;form-group&quot;&gt;&#10;                                &lt;label htmlFor=&quot;password&quot;&gt;Password&lt;/label&gt;&#10;                                &lt;input&#10;                                    type=&quot;password&quot;&#10;                                    id=&quot;password&quot;&#10;                                    value={formData.password}&#10;                                    onChange={(e) =&gt; handleInputChange('password', e.target.value)}&#10;                                    className={errors.password ? 'error' : ''}&#10;                                    disabled={isCreating}&#10;                                    placeholder=&quot;Enter password (min. 6 characters)&quot;&#10;                                /&gt;&#10;                                {errors.password &amp;&amp; &lt;span className=&quot;field-error&quot;&gt;{errors.password}&lt;/span&gt;}&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;div className=&quot;form-group&quot;&gt;&#10;                                &lt;label htmlFor=&quot;confirmPassword&quot;&gt;Confirm Password&lt;/label&gt;&#10;                                &lt;input&#10;                                    type=&quot;password&quot;&#10;                                    id=&quot;confirmPassword&quot;&#10;                                    value={formData.confirmPassword}&#10;                                    onChange={(e) =&gt; handleInputChange('confirmPassword', e.target.value)}&#10;                                    className={errors.confirmPassword ? 'error' : ''}&#10;                                    disabled={isCreating}&#10;                                    placeholder=&quot;Confirm password&quot;&#10;                                /&gt;&#10;                                {errors.confirmPassword &amp;&amp; &lt;span className=&quot;field-error&quot;&gt;{errors.confirmPassword}&lt;/span&gt;}&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;button &#10;                            type=&quot;button&quot;&#10;                            onClick={handleCreateAccount}&#10;                            disabled={!canCreateAccount}&#10;                            className=&quot;create-admin-button&quot;&#10;                        &gt;&#10;                            {isCreating ? 'Creating Account &amp; Sending Email...' : 'Create Admin Account'}&#10;                        &lt;/button&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Step 2: Email Verification Section */}&#10;            {emailSent &amp;&amp; !accountCreated &amp;&amp; (&#10;                &lt;div className=&quot;verification-section&quot;&gt;&#10;                    &lt;h3&gt; Firebase Verification Email Sent!&lt;/h3&gt;&#10;                    &lt;p&gt;A verification email has been sent to: &lt;strong&gt;{formData.email}&lt;/strong&gt;&lt;/p&gt;&#10;                    &lt;p&gt;Please check your email (including spam/junk folder) and click the verification link.&lt;/p&gt;&#10;&#10;                    &lt;div className=&quot;verification-flow&quot;&gt;&#10;                        &lt;div className=&quot;flow-step&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-envelope-open-text&quot;&gt;&lt;/i&gt;&#10;                            &lt;div&gt;&#10;                                &lt;strong&gt;1. Check Your Email&lt;/strong&gt;&#10;                                &lt;p&gt;Look for an email from Firebase Authentication&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flow-step&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-mouse-pointer&quot;&gt;&lt;/i&gt;&#10;                            &lt;div&gt;&#10;                                &lt;strong&gt;2. Click Verification Link&lt;/strong&gt;&#10;                                &lt;p&gt;Click the link in the email to verify your account&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flow-step&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt;&#10;                            &lt;div&gt;&#10;                                &lt;strong&gt;3. Complete Setup&lt;/strong&gt;&#10;                                &lt;p&gt;Come back here and click &quot;Check Verification&quot;&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &#10;                    &lt;div className=&quot;verification-actions&quot;&gt;&#10;                        &lt;button &#10;                            onClick={handleCheckVerification}&#10;                            disabled={!canCheckVerification}&#10;                            className=&quot;check-verification-button&quot;&#10;                        &gt;&#10;                            {isCheckingVerification ? 'Checking Verification...' : 'Check Email Verification'}&#10;                        &lt;/button&gt;&#10;&#10;                        {canResendEmail &amp;&amp; (&#10;                            &lt;button&#10;                                onClick={handleResendVerificationEmail}&#10;                                disabled={isSendingVerification}&#10;                                className=&quot;resend-verification-button&quot;&#10;                            &gt;&#10;                                {isSendingVerification ? 'Resending...' : 'Resend Verification Email'}&#10;                            &lt;/button&gt;&#10;                        )}&#10;&#10;                        &lt;button &#10;                            onClick={handleStartOver}&#10;                            className=&quot;start-over-button&quot;&#10;                        &gt;&#10;                            Start Over&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;verification-help&quot;&gt;&#10;                        &lt;h4&gt; Troubleshooting&lt;/h4&gt;&#10;                        &lt;ul&gt;&#10;                            &lt;li&gt;Check your spam/junk folder for the verification email&lt;/li&gt;&#10;                            &lt;li&gt;Make sure the email address is entered correctly&lt;/li&gt;&#10;                            &lt;li&gt;The verification email comes directly from Firebase&lt;/li&gt;&#10;                            &lt;li&gt;Click &quot;Resend&quot; if you don't receive the email within 5 minutes&lt;/li&gt;&#10;                            &lt;li&gt;After clicking the verification link, return here and click &quot;Check Verification&quot;&lt;/li&gt;&#10;                        &lt;/ul&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Step 3: Success Section */}&#10;            {accountCreated &amp;&amp; createdAccount &amp;&amp; (&#10;                &lt;div className=&quot;success-section&quot;&gt;&#10;                    &lt;h3&gt; Admin Account Created Successfully!&lt;/h3&gt;&#10;                    &lt;p&gt;The admin account for &lt;strong&gt;{createdAccount.email}&lt;/strong&gt; has been created and email verified!&lt;/p&gt;&#10;                    &lt;p&gt;The admin can now login using their email and password.&lt;/p&gt;&#10;                    &#10;                    &lt;div className=&quot;success-details&quot;&gt;&#10;                        &lt;div className=&quot;detail-item&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-user-shield&quot;&gt;&lt;/i&gt;&#10;                            &lt;span&gt;Admin privileges have been granted&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;detail-item&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-envelope-circle-check&quot;&gt;&lt;/i&gt;&#10;                            &lt;span&gt;Email verification completed&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;detail-item&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-key&quot;&gt;&lt;/i&gt;&#10;                            &lt;span&gt;Account is ready for login&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;success-actions&quot;&gt;&#10;                        &lt;button &#10;                            onClick={handleStartOver}&#10;                            className=&quot;create-another-button&quot;&#10;                        &gt;&#10;                            Create Another Admin Account&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;});&#10;&#10;&#10;const UserAccountRow = observer(({ user, onAction, onNameClick, type }) =&gt; {&#10;    const statusClass = user.status === 'Active' || user.status === 'approved' ? 'status-active' : 'status-inactive';&#10;&#10;    const isProfileIncomplete = (user.role === 'basic' || user.role === 'premium') &amp;&amp;&#10;                               (!user.profileCompleted || (!user.firstName &amp;&amp; !user.lastName));&#10;&#10;    const renderUserName = () =&gt; {&#10;        if (isProfileIncomplete) {&#10;            return (&#10;                &lt;span className=&quot;user-name-clickable incomplete-profile&quot; onClick={() =&gt; onNameClick(user)}&gt;&#10;                    &lt;i className=&quot;fas fa-exclamation-triangle profile-warning-icon&quot;&gt;&lt;/i&gt;&#10;                    &lt;span className=&quot;incomplete-profile-text&quot;&gt;&#10;                        {user.firstName || user.lastName ?&#10;                            `${user.firstName || ''} ${user.lastName || ''}`.trim() :&#10;                            'Profile Incomplete'&#10;                        }&#10;                    &lt;/span&gt;&#10;                    &lt;span className=&quot;profile-status-badge incomplete&quot;&gt;Incomplete&lt;/span&gt;&#10;                &lt;/span&gt;&#10;            );&#10;        }&#10;&#10;        return (&#10;            &lt;span className=&quot;user-name-clickable&quot; onClick={() =&gt; onNameClick(user)}&gt;&#10;                &lt;i className=&quot;fas fa-user-circle user-icon&quot;&gt;&lt;/i&gt;&#10;                {user.firstName ? `${user.firstName} ${user.lastName}` : user.name}&#10;            &lt;/span&gt;&#10;        );&#10;    };&#10;&#10;    return (&#10;        &lt;tr className={isProfileIncomplete ? 'incomplete-profile-row' : ''}&gt;&#10;            &lt;td&gt;&#10;                {renderUserName()}&#10;            &lt;/td&gt;&#10;            &lt;td&gt;{user.email}&lt;/td&gt;&#10;            {type === 'all' &amp;&amp; &lt;td&gt;{user.role || 'N/A'}&lt;/td&gt;}&#10;            &lt;td className={statusClass}&gt;&#10;                &lt;span className=&quot;status-dot&quot;&gt;&lt;/span&gt;{user.status === 'approved' ? 'Active' : user.status}&#10;            &lt;/td&gt;&#10;            {type === 'all' &amp;&amp; &lt;td&gt;{user.userSince || 'N/A'}&lt;/td&gt;}&#10;            {type === 'pending' &amp;&amp; &lt;td&gt;{user.appliedDate || 'N/A'}&lt;/td&gt;}&#10;&#10;            {type === 'pending' &amp;&amp; (&#10;                &lt;td&gt;&#10;                    &lt;button&#10;                        className=&quot;doc-action-button view-button&quot;&#10;                        onClick={() =&gt; AdminDashboardViewModel.viewCertificate(user.id)}&#10;                        disabled={AdminDashboardViewModel.isLoading}&#10;                    &gt;&#10;                        VIEW&#10;                    &lt;/button&gt;&#10;                &lt;/td&gt;&#10;            )}&#10;&#10;            {type === 'pending' &amp;&amp; (&#10;                &lt;&gt;&#10;                    &lt;td&gt;&#10;                        &lt;button&#10;                            className=&quot;action-button approve-button&quot;&#10;                            onClick={() =&gt; AdminDashboardViewModel.approveNutritionist(user.id)}&#10;                            disabled={AdminDashboardViewModel.isLoading}&#10;                        &gt;&#10;                            Approve&#10;                        &lt;/button&gt;&#10;                    &lt;/td&gt;&#10;                    {/* Reject Column */}&#10;                    &lt;td&gt;&#10;                        &lt;button&#10;                            className=&quot;action-button reject-button&quot;&#10;                            onClick={() =&gt; {&#10;                                AdminDashboardViewModel.setSelectedUser(user);&#10;                                AdminDashboardViewModel.setShowRejectionReasonModal(true);&#10;                            }}&#10;                            disabled={AdminDashboardViewModel.isLoading}&#10;                        &gt;&#10;                            Reject&#10;                        &lt;/button&gt;&#10;                    &lt;/td&gt;&#10;                &lt;/&gt;&#10;            )}&#10;&#10;            {type === 'all' &amp;&amp; (&#10;                &lt;td&gt;&#10;                    {user.role !== 'admin' &amp;&amp; (&#10;                        &lt;button&#10;                            className={`action-button ${user.status === 'Active' ? 'suspend-button' : 'unsuspend-button'}`}&#10;                            onClick={() =&gt; onAction(user.id, user.status)}&#10;                            disabled={AdminDashboardViewModel.userAccountsVM.isLoading}&#10;                        &gt;&#10;                            {user.status === 'Active' ? 'Suspend' : 'Unsuspend'}&#10;                        &lt;/button&gt;&#10;                    )}&#10;                &lt;/td&gt;&#10;            )}&#10;        &lt;/tr&gt;&#10;    );&#10;});&#10;&#10;&#10;const Pagination = observer(({ currentData, itemsPerPage = 10, onPageChange, currentPage = 1 }) =&gt; {&#10;    const totalItems = currentData?.length || 0;&#10;    const totalPages = Math.max(1, Math.ceil(totalItems / itemsPerPage));&#10;    &#10;    const handlePrevious = () =&gt; {&#10;        if (currentPage &gt; 1) {&#10;            onPageChange(currentPage - 1);&#10;        }&#10;    };&#10;    &#10;    const handleNext = () =&gt; {&#10;        if (currentPage &lt; totalPages) {&#10;            onPageChange(currentPage + 1);&#10;        }&#10;    };&#10;    &#10;    const handlePageClick = (pageNumber) =&gt; {&#10;        onPageChange(pageNumber);&#10;    };&#10;&#10;    &#10;    const getPageNumbers = () =&gt; {&#10;        const pages = [];&#10;        const maxVisiblePages = 5;&#10;        &#10;        if (totalPages &lt;= maxVisiblePages) {&#10;            for (let i = 1; i &lt;= totalPages; i++) {&#10;                pages.push(i);&#10;            }&#10;        } else {&#10;            const startPage = Math.max(1, currentPage - 2);&#10;            const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);&#10;            &#10;            for (let i = startPage; i &lt;= endPage; i++) {&#10;                pages.push(i);&#10;            }&#10;        }&#10;        &#10;        return pages;&#10;    };&#10;    &#10;    return (&#10;        &lt;div className=&quot;pagination&quot;&gt;&#10;            &lt;button &#10;                onClick={handlePrevious} &#10;                disabled={currentPage &lt;= 1}&#10;                className={currentPage &lt;= 1 ? 'disabled' : ''}&#10;            &gt;&#10;                &amp;lt;&#10;            &lt;/button&gt;&#10;            &#10;            {getPageNumbers().map(pageNumber =&gt; (&#10;                &lt;button&#10;                    key={pageNumber}&#10;                    onClick={() =&gt; handlePageClick(pageNumber)}&#10;                    className={currentPage === pageNumber ? 'active' : ''}&#10;                &gt;&#10;                    {pageNumber}&#10;                &lt;/button&gt;&#10;            ))}&#10;            &#10;            &lt;button &#10;                onClick={handleNext} &#10;                disabled={currentPage &gt;= totalPages}&#10;                className={currentPage &gt;= totalPages ? 'disabled' : ''}&#10;            &gt;&#10;                &amp;gt;&#10;            &lt;/button&gt;&#10;            &#10;            &lt;span className=&quot;pagination-info&quot;&gt;&#10;                Page {currentPage} of {totalPages} ({totalItems} total items)&#10;            &lt;/span&gt;&#10;        &lt;/div&gt;&#10;    );&#10;});&#10;&#10;&#10;const UserAccountsContent = observer(({ activeUserAccountTab }) =&gt; {&#10;    const navigate = useNavigate();&#10;    const location = useLocation();&#10;&#10;    const {&#10;        activeTab,&#10;        filteredPendingAccounts,&#10;        isLoading,&#10;        error,&#10;        showRejectionReasonModal,&#10;        rejectionReason,&#10;        selectedUser,&#10;        showUserDetailModal,&#10;        userAccountsVM,&#10;        setSelectedUser,&#10;        setShowUserDetailModal,&#10;        setShowRejectionReasonModal,&#10;        setRejectionReason,&#10;    } = AdminDashboardViewModel;&#10;&#10;    const {&#10;        searchTerm,&#10;        filteredAllAccounts,&#10;        isLoading: userAccountsLoading,&#10;        error: userAccountsError,&#10;    } = userAccountsVM;&#10;&#10;    // Account type filter state&#10;    const [selectedAccountType, setSelectedAccountType] = useState('all');&#10;    const [currentPage, setCurrentPage] = useState(1);&#10;    const itemsPerPage = 10;&#10;&#10;    // Account type options&#10;    const accountTypeOptions = [&#10;        { value: 'all', label: 'All Account Types', count: 0 },&#10;        { value: 'basic', label: 'Basic Users', count: 0 },&#10;        { value: 'premium', label: 'Premium Users', count: 0 },&#10;        { value: 'nutritionist', label: 'Nutritionists', count: 0 },&#10;        { value: 'admin', label: 'Administrators', count: 0 }&#10;    ];&#10;&#10;    // Get current tab&#10;    const getCurrentTab = () =&gt; {&#10;        if (activeUserAccountTab) {&#10;            const tabMap = {&#10;                'all': 'ALL_ACCOUNTS',&#10;                'pending': 'PENDING_APPROVAL',&#10;                'createAdmin': 'CREATE_ADMIN'&#10;            };&#10;            return tabMap[activeUserAccountTab] || 'ALL_ACCOUNTS';&#10;        }&#10;&#10;        const pathname = location.pathname;&#10;        if (pathname.includes('/user-accounts/pending')) return 'PENDING_APPROVAL';&#10;        if (pathname.includes('/user-accounts/create-admin')) return 'CREATE_ADMIN';&#10;        if (pathname.includes('/user-accounts/all')) return 'ALL_ACCOUNTS';&#10;        return 'ALL_ACCOUNTS'; &#10;    };&#10;&#10;    const currentTab = getCurrentTab();&#10;&#10;    // Filter data by account type&#10;    const getFilteredData = () =&gt; {&#10;        const baseData = activeTab === 'ALL_ACCOUNTS' ? filteredAllAccounts : filteredPendingAccounts;&#10;        &#10;        if (selectedAccountType === 'all') {&#10;            return baseData;&#10;        }&#10;        &#10;        return baseData.filter(user =&gt; user.role === selectedAccountType);&#10;    };&#10;&#10;    // Calculate counts for each account type&#10;    const getAccountTypeCounts = () =&gt; {&#10;        const baseData = activeTab === 'ALL_ACCOUNTS' ? filteredAllAccounts : filteredPendingAccounts;&#10;        &#10;        const counts = {&#10;            all: baseData.length,&#10;            basic: baseData.filter(user =&gt; user.role === 'basic').length,&#10;            premium: baseData.filter(user =&gt; user.role === 'premium').length,&#10;            nutritionist: baseData.filter(user =&gt; user.role === 'nutritionist').length,&#10;            admin: baseData.filter(user =&gt; user.role === 'admin').length&#10;        };&#10;&#10;        return accountTypeOptions.map(option =&gt; ({&#10;            ...option,&#10;            count: counts[option.value] || 0&#10;        }));&#10;    };&#10;&#10;    // Get current filtered data&#10;    const currentData = getFilteredData();&#10;    const accountTypeOptionsWithCounts = getAccountTypeCounts();&#10;    &#10;    // Pagination logic&#10;    const totalItems = currentData.length;&#10;    const totalPages = Math.ceil(totalItems / itemsPerPage);&#10;    const startIndex = (currentPage - 1) * itemsPerPage;&#10;    const endIndex = startIndex + itemsPerPage;&#10;    const currentPageData = currentData.slice(startIndex, endIndex);&#10;&#10;    // Event handlers&#10;    const handleAccountTypeChange = (accountType) =&gt; {&#10;        setSelectedAccountType(accountType);&#10;        setCurrentPage(1);&#10;    };&#10;&#10;    const handlePageChange = (newPage) =&gt; {&#10;        setCurrentPage(newPage);&#10;    };&#10;&#10;    const handleTabNavigation = (tab) =&gt; {&#10;        const routeMap = {&#10;            'ALL_ACCOUNTS': '/admin/user-accounts/all',&#10;            'PENDING_APPROVAL': '/admin/user-accounts/pending',&#10;            'CREATE_ADMIN': '/admin/user-accounts/create-admin'&#10;        };&#10;&#10;        if (routeMap[tab]) {&#10;            navigate(routeMap[tab]);&#10;        }&#10;    };&#10;&#10;    const handleOpenModal = async (user) =&gt; {&#10;        console.log(&quot;[AdminDashboard] Opening user detail modal for:&quot;, user);&#10;&#10;        try {&#10;            setSelectedUser(user);&#10;&#10;            if (user.id || user._id) {&#10;                const userId = user.id || user._id;&#10;&#10;                if (typeof premiumStatViewModel.loadPremiumData === 'function') {&#10;                    if (premiumStatViewModel.allPremiumUserAccounts.length === 0) {&#10;                        await premiumStatViewModel.loadPremiumData();&#10;                    }&#10;&#10;                    const premiumUser = premiumStatViewModel.allPremiumUserAccounts.find(&#10;                        premiumAccount =&gt; premiumAccount._id === userId || premiumAccount.id === userId&#10;                    );&#10;&#10;                    if (premiumUser) {&#10;                        console.log(&quot;[AdminDashboard] Found premium user data:&quot;, premiumUser);&#10;                        setSelectedUser(premiumUser);&#10;                    } else {&#10;                        console.log(&quot;[AdminDashboard] No premium data found for user, using basic data&quot;);&#10;                        &#10;                        const enrichedUser = {&#10;                            ...user,&#10;                            _id: userId,&#10;                            displayName: user.firstName &amp;&amp; user.lastName&#10;                                ? `${user.firstName} ${user.lastName}`&#10;                                : (user.name || user.email),&#10;                            displayStatus: 'inactive',&#10;                            displayRenewalDate: 'N/A',&#10;                            currentSubscription: null&#10;                        };&#10;                        setSelectedUser(enrichedUser);&#10;                    }&#10;                } else {&#10;                    console.log(&quot;[AdminDashboard] PremiumStatViewModel methods not available, using basic user data&quot;);&#10;                }&#10;            }&#10;&#10;            setShowUserDetailModal(true);&#10;&#10;        } catch (error) {&#10;            console.error(&quot;[AdminDashboard] Error enriching user data:&quot;, error);&#10;            setShowUserDetailModal(true);&#10;        }&#10;    };&#10;&#10;    const handleCloseModal = () =&gt; {&#10;        setShowUserDetailModal(false);&#10;        setSelectedUser(null);&#10;        AdminDashboardViewModel.fetchAccounts();&#10;    };&#10;&#10;    const handleApproveFromModal = async (userId) =&gt; {&#10;        await adminStatViewModel.approveNutritionist(userId);&#10;        handleCloseModal();&#10;    };&#10;&#10;    const handleRejectFromModal = async (userId) =&gt; {&#10;        setSelectedUser(adminStatViewModel.selectedUserForManagement);&#10;        setShowRejectionReasonModal(true);&#10;    };&#10;&#10;    const handleRejectNutritionist = async (userId, reasonParam) =&gt; {&#10;        try {&#10;            const finalReason = reasonParam || rejectionReason;&#10;            &#10;            console.log('Rejecting nutritionist:', userId, 'with reason:', finalReason);&#10;            &#10;            if (!finalReason || !finalReason.trim()) {&#10;                alert('Please provide a reason for rejection.');&#10;                return;&#10;            }&#10;            &#10;            await AdminDashboardViewModel.rejectNutritionist(userId, finalReason.trim());&#10;            &#10;            setShowRejectionReasonModal(false);&#10;            setSelectedUser(null);&#10;            setRejectionReason('');&#10;            &#10;            await AdminDashboardViewModel.fetchAccounts();&#10;            &#10;            alert('Nutritionist has been rejected and notification email sent!');&#10;            &#10;        } catch (error) {&#10;            console.error('Error rejecting nutritionist:', error);&#10;            alert(`Failed to reject nutritionist: ${error.message}`);&#10;        }&#10;    };&#10;&#10;    const handleConfirmRejectFromModal = async (userId, reason) =&gt; {&#10;        await adminStatViewModel.rejectNutritionist(userId, reason);&#10;        setShowRejectionReasonModal(false);&#10;        handleCloseModal();&#10;    };&#10;&#10;    const handleViewDocumentFromModal = async (userId) =&gt; {&#10;        await adminStatViewModel.viewCertificate(userId);&#10;    };&#10;&#10;    const handleSuspendFromModal = async (userId, isSuspended) =&gt; {&#10;        await adminStatViewModel.suspendUserAccount(userId, isSuspended);&#10;        handleCloseModal();&#10;    };&#10;&#10;    const handleChangeRoleFromModal = async (userId, newRole) =&gt; {&#10;        await adminStatViewModel.updateUserRole(userId, newRole);&#10;        handleCloseModal();&#10;    };&#10;&#10;    const handleDeleteAccountFromModal = async (userId) =&gt; {&#10;        await adminStatViewModel.deleteUserAccount(userId);&#10;        handleCloseModal();&#10;    };&#10;&#10;    const handleSuspendUnsuspend = async (userId, currentStatus) =&gt; {&#10;        console.log(`Attempting to change status for User ${userId} from ${currentStatus}`);&#10;        try {&#10;            if (currentStatus === 'Active') {&#10;                await userAccountsVM.suspendUser(userId);&#10;            } else {&#10;                await userAccountsVM.unsuspendUser(userId);&#10;            }&#10;        } catch (operationError) {&#10;            console.error(&quot;Error changing user status in component:&quot;, operationError);&#10;        }&#10;    };&#10;&#10;    // Effects&#10;    useEffect(() =&gt; {&#10;        AdminDashboardViewModel.setActiveTab(currentTab);&#10;    }, [currentTab]);&#10;&#10;    useEffect(() =&gt; {&#10;        AdminDashboardViewModel.fetchAccounts();&#10;    }, [activeTab]);&#10;&#10;    useEffect(() =&gt; {&#10;        setSelectedAccountType('all');&#10;        setCurrentPage(1);&#10;    }, [activeTab, searchTerm]);&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div className=&quot;admin-dashboard-main-content-area&quot;&gt;&#10;                &lt;header className=&quot;admin-header&quot;&gt;&#10;                    &lt;h1 className=&quot;admin-page-title&quot;&gt;USER ACCOUNTS&lt;/h1&gt;&#10;                    &lt;div className=&quot;admin-search-bar&quot;&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            placeholder=&quot;Search by name or email&quot;&#10;                            value={searchTerm}&#10;                            onChange={(e) =&gt; userAccountsVM.setSearchTerm(e.target.value)}&#10;                        /&gt;&#10;                        &lt;i className=&quot;fas fa-search&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/header&gt;&#10;                &lt;div style={{ padding: '10px 0' }}&gt;&#10;                    &lt;BulkInsertButton /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div style={{ padding: '10px 0' }}&gt;&#10;                    &lt;DeleteDummyData /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;admin-tabs&quot;&gt;&#10;                &lt;button&#10;                    className={`tab-button ${activeTab === 'ALL_ACCOUNTS' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleTabNavigation('ALL_ACCOUNTS')}&#10;                &gt;&#10;                    ALL ACCOUNTS&#10;                &lt;/button&gt;&#10;                &lt;button&#10;                    className={`tab-button ${activeTab === 'PENDING_APPROVAL' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleTabNavigation('PENDING_APPROVAL')}&#10;                &gt;&#10;                    PENDING APPROVAL&#10;                &lt;/button&gt;&#10;                &lt;button&#10;                    className={`tab-button ${activeTab === 'CREATE_ADMIN' ? 'active' : ''}`}&#10;                    onClick={() =&gt; handleTabNavigation('CREATE_ADMIN')}&#10;                &gt;&#10;                    CREATE ADMIN&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &#10;            {activeTab === 'ALL_ACCOUNTS' &amp;&amp; (&#10;                &lt;div style={{&#10;                    padding: '20px',&#10;                    backgroundColor: '#fffaf3'&#10;                }}&gt;&#10;                    &lt;div style={{ &#10;                        display: 'flex', &#10;                        alignItems: 'center', &#10;                        gap: '12px', &#10;                        flexWrap: 'wrap' &#10;                    }}&gt;&#10;                        &lt;span style={{ &#10;                            fontWeight: '600', &#10;                            color: '#374151',&#10;                            fontSize: '14px',&#10;                            marginRight: '8px'&#10;                        }}&gt;&#10;                            Filter by Account Type:&#10;                        &lt;/span&gt;&#10;                        &#10;                        {accountTypeOptionsWithCounts.map((option) =&gt; (&#10;                            &lt;button&#10;                                key={option.value}&#10;                                onClick={() =&gt; handleAccountTypeChange(option.value)}&#10;                                style={{&#10;                                    padding: '6px 12px',&#10;                                    border: selectedAccountType === option.value ? '2px solid #1e525c' : '1px solid #d1d5db',&#10;                                    borderRadius: '6px',&#10;                                    backgroundColor: selectedAccountType === option.value ? '#1e525c' : 'white',&#10;                                    color: selectedAccountType === option.value ? 'white' : '#1e525c',&#10;                                    fontSize: '13px',&#10;                                    fontWeight: selectedAccountType === option.value ? '600' : '500',&#10;                                    cursor: 'pointer',&#10;                                    transition: 'all 0.2s ease',&#10;                                    display: 'inline-flex',&#10;                                    alignItems: 'center',&#10;                                    gap: '6px',&#10;                                    boxShadow: selectedAccountType === option.value ? '0 2px 4px rgba(79, 70, 229, 0.2)' : '0 1px 2px rgba(0, 0, 0, 0.05)'&#10;                                }}&#10;                            &gt;&#10;                                &lt;span&gt;{option.label}&lt;/span&gt;&#10;                                &lt;span style={{&#10;                                    backgroundColor: selectedAccountType === option.value ? 'rgba(255,255,255,0.2)' : '#f3f4f6',&#10;                                    color: selectedAccountType === option.value ? 'white' : '#6b7280',&#10;                                    padding: '1px 6px',&#10;                                    borderRadius: '4px',&#10;                                    fontSize: '11px',&#10;                                    fontWeight: '700',&#10;                                    minWidth: '18px',&#10;                                    textAlign: 'center'&#10;                                }}&gt;&#10;                                    {option.count}&#10;                                &lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                    &#10;                    &#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {activeTab === 'CREATE_ADMIN' ? (&#10;                &lt;AdminCreateAccountContent /&gt;&#10;            ) : (&#10;                &lt;&gt;&#10;                    {(isLoading || userAccountsLoading) &amp;&amp; &lt;p className=&quot;loading-message&quot;&gt;Loading accounts...&lt;/p&gt;}&#10;                    {(error || userAccountsError) &amp;&amp; &lt;p className=&quot;error-message&quot;&gt;{error || userAccountsError}&lt;/p&gt;}&#10;&#10;                    &lt;div className=&quot;table-container&quot;&gt;&#10;                        &lt;table&gt;&#10;                            &lt;thead&gt;&#10;                                &lt;tr&gt;&#10;                                    &lt;th&gt;Name&lt;/th&gt;&#10;                                    &lt;th&gt;Email&lt;/th&gt;&#10;                                    {activeTab === 'ALL_ACCOUNTS' &amp;&amp; &lt;th&gt;Account Type&lt;/th&gt;}&#10;                                    &lt;th&gt;Status&lt;/th&gt;&#10;                                    {activeTab === 'ALL_ACCOUNTS' &amp;&amp; &lt;th&gt;User Since&lt;/th&gt;}&#10;                                    {activeTab === 'PENDING_APPROVAL' &amp;&amp; (&#10;                                        &lt;&gt;&#10;                                            &lt;th&gt;Signed up at&lt;/th&gt;&#10;                                            &lt;th&gt;Documents&lt;/th&gt;&#10;                                            &lt;th&gt;Approve&lt;/th&gt;&#10;                                            &lt;th&gt;Reject&lt;/th&gt;&#10;                                        &lt;/&gt;&#10;                                    )}&#10;                                    {activeTab === 'ALL_ACCOUNTS' &amp;&amp; &lt;th&gt;Action&lt;/th&gt;}&#10;                                &lt;/tr&gt;&#10;                            &lt;/thead&gt;&#10;&#10;                            &lt;tbody&gt;&#10;                                {currentPageData.length &gt; 0 ? (&#10;                                    currentPageData.map(user =&gt; (&#10;                                        &lt;UserAccountRow&#10;                                            key={user.id}&#10;                                            user={user}&#10;                                            onAction={handleSuspendUnsuspend}&#10;                                            onNameClick={handleOpenModal}&#10;                                            type={activeTab === 'ALL_ACCOUNTS' ? 'all' : 'pending'}&#10;                                        /&gt;&#10;                                    ))&#10;                                ) : (&#10;                                    &lt;tr&gt;&#10;                                        &lt;td colSpan={activeTab === 'ALL_ACCOUNTS' ? '6' : '7'} className=&quot;no-data-message&quot;&gt;&#10;                                            {(isLoading || userAccountsLoading) ? '' : (&#10;                                                selectedAccountType === 'all' &#10;                                                    ? (activeTab === 'ALL_ACCOUNTS' ? 'No user accounts found.' : 'No accounts pending approval.')&#10;                                                    : `No ${selectedAccountType} accounts found.`&#10;                                            )}&#10;                                        &lt;/td&gt;&#10;                                    &lt;/tr&gt;&#10;                                )}&#10;                            &lt;/tbody&gt;&#10;                        &lt;/table&gt;&#10;&#10;                        {/* Pagination */}&#10;                        {currentData.length &gt; 0 &amp;&amp; (&#10;                            &lt;Pagination&#10;                                currentData={currentData}&#10;                                itemsPerPage={itemsPerPage}&#10;                                currentPage={currentPage}&#10;                                onPageChange={handlePageChange}&#10;                            /&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/&gt;&#10;            )}&#10;&#10;            {/* Modals */}&#10;            {showUserDetailModal &amp;&amp; selectedUser &amp;&amp; (&#10;                &lt;UserDetailModal&#10;                    user={selectedUser}&#10;                    onClose={handleCloseModal}&#10;                    onApprove={handleApproveFromModal}&#10;                    onReject={handleRejectFromModal}&#10;                    onViewDocument={handleViewDocumentFromModal}&#10;                    onSuspend={handleSuspendFromModal}&#10;                    onUnsuspend={handleSuspendFromModal}&#10;                    onChangeRole={handleChangeRoleFromModal}&#10;                    onDeleteAccount={handleDeleteAccountFromModal}&#10;                    loading={adminStatViewModel.loading}&#10;                    error={adminStatViewModel.error}&#10;                    success={adminStatViewModel.success}&#10;                    showRejectionReasonModal={showRejectionReasonModal}&#10;                    rejectionReason={rejectionReason}&#10;                    setRejectionReason={setRejectionReason}&#10;                    onConfirmReject={handleConfirmRejectFromModal}&#10;                /&gt;&#10;            )}&#10;&#10;            {showRejectionReasonModal &amp;&amp; selectedUser &amp;&amp; (&#10;                &lt;RejectionReasonModal&#10;                    reason={rejectionReason}&#10;                    setReason={(value) =&gt; setRejectionReason(value)}&#10;                    onConfirm={(reasonFromModal) =&gt; {&#10;                        const finalReason = reasonFromModal || rejectionReason;&#10;                        handleRejectNutritionist(selectedUser.id, finalReason);&#10;                    }}&#10;                    onClose={() =&gt; {&#10;                        setShowRejectionReasonModal(false);&#10;                        setSelectedUser(null);&#10;                        setRejectionReason('');&#10;                    }}&#10;                /&gt;&#10;            )}&#10;        &lt;/&gt;&#10;    );&#10;});&#10;&#10;&#10;const AdminDashboard = observer(({ onLogout, activeSection, activeMealPlanTab, activeUserAccountTab }) =&gt; {&#10;    const location = useLocation();&#10;&#10;    const getCurrentView = () =&gt; {&#10;        if (activeSection) return activeSection;&#10;&#10;        const pathname = location.pathname;&#10;        if (pathname.includes('/admin/profile')) return 'myProfile';&#10;        if (pathname.includes('/admin/user-accounts')) return 'userAccounts';&#10;        if (pathname.includes('/admin/premium-accounts')) return 'premiumAccounts';&#10;        if (pathname.includes('/admin/meal-plans') || pathname.includes('/admin/meal-plan-detail')) return 'mealPlans';&#10;        if (pathname.includes('/admin/export-report')) return 'exportReport';&#10;        if (pathname.includes('/admin/rewards')) return 'rewards';&#10;        if (pathname.includes('/admin/edit-website')) return 'editWebsite';&#10;        if (pathname.includes('/admin/user-feedbacks')) return 'userFeedbacks';&#10;        return 'dashboard'; &#10;    };&#10;&#10;    const currentView = getCurrentView();&#10;&#10;    useEffect(() =&gt; {&#10;        const checkAccess = async () =&gt; {&#10;            await AdminViewModel.verifyAdminAccess();&#10;            console.log('isAdmin', AdminViewModel.isAdmin);&#10;            if (!AdminViewModel.isAdmin) {&#10;                alert(&quot;Access Denied: You must be an administrator to view this page.&quot;);&#10;                window.location.href = '/login';&#10;            }&#10;        };&#10;        checkAccess();&#10;    }, []);&#10;&#10;    return (&#10;        &lt;div className=&quot;admin-dashboard-page&quot;&gt;&#10;            &lt;AdminSidebar onLogout={onLogout} /&gt;&#10;            &lt;div className=&quot;admin-main-content&quot;&gt;&#10;                {currentView === 'myProfile' &amp;&amp; &lt;AdminProfile /&gt;}&#10;                {currentView === 'dashboard' &amp;&amp; &lt;AdminStatDashboard /&gt;}&#10;                {currentView === 'userAccounts' &amp;&amp; &lt;UserAccountsContent activeUserAccountTab={activeUserAccountTab} /&gt;}&#10;                {currentView === 'premiumAccounts' &amp;&amp; &lt;PremiumPage /&gt;}&#10;                {(currentView === 'mealPlans' || currentView === 'mealPlanDetail') &amp;&amp; &lt;AdminMealPlans activeMealPlanTab={activeMealPlanTab} /&gt;}&#10;                {currentView === 'exportReport' &amp;&amp; &lt;AdminExportReport /&gt;}&#10;                {currentView === 'rewards' &amp;&amp; &lt;AdminRewards /&gt;}&#10;                {currentView === 'editWebsite' &amp;&amp; &lt;MarketingWebsiteEditorPage /&gt;}&#10;                {currentView === 'userFeedbacks' &amp;&amp; &lt;UserFeedbacksPage /&gt;}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;});&#10;&#10;export default AdminDashboard;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>